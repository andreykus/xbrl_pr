package com.bivgroup.xbrl.instance.impl.ubmatrix;


import com.bivgroup.xbrl.common.AbstractStructuraProcessor;
import com.bivgroup.xbrl.data.Listener;
import com.bivgroup.xbrl.instance.CreateFix;
import com.bivgroup.xbrl.instance.Creator;
import com.bivgroup.xbrl.instance.namespace.CbrNameSpace;
import com.bivgroup.xbrl.instance.namespace.IfrsNameSpace;
import com.bivgroup.xbrl.instance.namespace.XbrlNameSpace;
import ubmatrix.xbrl.common.exception.src.CoreException;
import ubmatrix.xbrl.common.formatter.src.Formatter;
import ubmatrix.xbrl.common.formatter.src.FormatterException;
import ubmatrix.xbrl.common.formatter.src.IFormatter;
import ubmatrix.xbrl.common.memo.registry.src.DiscreteMemoRegistry;
import ubmatrix.xbrl.common.memo.src.IMemo;
import ubmatrix.xbrl.common.memo.uriResolver.src.IURIResolver;
import ubmatrix.xbrl.common.memo.uriResolver.src.URIResolver;
import ubmatrix.xbrl.common.src.*;
import ubmatrix.xbrl.common.utility.src.ResetableIterator;
import ubmatrix.xbrl.common.utility.src.Utility;
import ubmatrix.xbrl.domain.query.src.IDTSQuery;
import ubmatrix.xbrl.domain.xbrl21Domain.dts.src.DTSDiscoverer;
import ubmatrix.xbrl.domain.xbrl21Domain.dts.src.DTSPath;
import ubmatrix.xbrl.domain.xbrl21Domain.dts.src.XPath20;
import ubmatrix.xbrl.domain.xbrl21Domain.dts.src.XQuery10;
import ubmatrix.xbrl.extensions.extensionFunctionServices.src.ExtensionFunctionException;
import ubmatrix.xbrl.locationController.factory.src.LocationHandleFactory;
import ubmatrix.xbrl.locationController.xbrlLocationController.locationHandle.src.FileLocationHandle;
import ubmatrix.xbrl.nodeWrapperServices.src.NodeWrapperException;
import ubmatrix.xbrl.src.Xbrl;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Created by bush on 15.03.2017.
 */
public class CreatorXbrlUBmatrix extends AbstractStructuraProcessor<String, CreateFix> implements ISimpleProgressNotify, Creator {
    private Listener listenerParam;

    private ArrayList m_memoList = new ArrayList();
    private String m_basePath = "";

    private IFormatter m_formatter = new Formatter();
    private IURIResolver m_resolver = new URIResolver();
    private String m_language = "en";

    final static String TAXONOM = "c:\\1222\\Электронная база данных расширенной модели данных и таксономии\\Бухгалтерская (финансовая) отчетность\\Таксономия\\www.cbr.ru\\xbrl\\2017-01-01\\ifrs-ru\\EP\\EP_PURCB.xsd";

    public CreatorXbrlUBmatrix()
            throws FormatterException, ExtensionFunctionException, NodeWrapperException, Exception {

        DiscreteMemoRegistry memoRegistry = new DiscreteMemoRegistry();
        long cookie = memoRegistry.attach(this);

        boolean success = Xbrl.initialize(memoRegistry);
        memoRegistry.detach(cookie);

        if (!success)
            throw new Exception("Failed to initialize");

        Configuration config = Configuration.getInstance();
        m_basePath = config.getCoreRoot();

        if (m_basePath == null)
            System.out.println("The environmental variable COREROOT is not defined. " +
                    "Please add COREROOT as environment variable and points to your XBRL Processor install directory.");

        // Add a trailing slash to the end if it doesn't exist
        if (!m_basePath.endsWith(File.separator))
            m_basePath += File.separator;
    }


    /**
     * Accessor method - returns the list of memos generated during loading the file
     */
    public ArrayList getMemoList() {

        return m_memoList;
    }

    /**
     * This method is used to clear the arraylist of memos
     */
    public void clearMemoList() {

        m_memoList.clear();
    }

    /**
     * This is a small utility method that dispalys all the memos
     */
    public void displayMemos() throws FormatterException {

        if (getMemoList().size() > 0) {

            System.out.println("Following errors occurred:");

            // print any error memos
            for (int i = 0; i < getMemoList().size(); ++i) {

                IMemo memo = (IMemo) getMemoList().get(i);
                System.out.println(getSubstitutedLocalizedString(memo));
            }
        }
    }

    /**
     * This method illustrates the use of Localizer, URIResolver and Formatter. IMemo
     * is passed to this method, from which it gets the memo particles.
     * <p>
     * Then it calls the URIResolver with the memoUri and the language, which in turn
     * calls the Localizer to return the localized String for that memoUri and language.
     * Note, in this example, English language 'en' is used, if you want to try
     * different language, make sure you have the appropriate localizer file.
     * <p>
     * Finally, the localized String and the particles are passed to Formatter which returns
     * the formatted String for displaying the error message
     *
     * @param e: The memo
     * @return A localized string after substituted with all the particles for that memo
     * @throws FormatterException
     */
    public String getSubstitutedLocalizedString(IMemo e) throws FormatterException {

        //Resolve the memo uri
        Object[] particles = e.getParticles();

        // Call the localizer with the memoUri and the language, and get back the localized string.
        // Note, the localized String might contain placeholders like {0}
        String localizedString = m_resolver.getUnsubstitutedLocalizedString(e.getMemoURI(), m_language);
        return (localizedString == e.getMemoURI()) ?
                e.getMemoURI() : m_formatter.getSubstitutedString(localizedString, particles);
    }


    /**
     * This method loads a file from the specified fileUri. A fileType, indicating whether
     * it is a Taxonomy, Linkbase or Instance document, is also passed.
     * <p>
     * After successful load, this method returns the DTS.
     *
     * @param fileUri:  The file to be loaded
     * @param fileType: Indicating whether the file is Taxonomy or Instance or Linkbase
     * @return The DTS
     */
    public IDTS load(String fileUri, int fileType) throws FormatterException {
        IDTS dts = null;

        DiscreteMemoRegistry discreteMemoRegistry = new DiscreteMemoRegistry();
        long cookie = discreteMemoRegistry.attach(this);

        ILocationHandle handle = LocationHandleFactory.createNewLocationHandle(null, fileUri, fileType);

        switch (fileType) {

            case LocationHandleType.c_Taxonomy:
                handle.setLocationHandleType(LocationHandleType.c_Taxonomy);
                break;

            case LocationHandleType.c_Linkbase:
                handle.setLocationHandleType(LocationHandleType.c_Linkbase);
                break;

            case LocationHandleType.c_Instance:
                handle.setLocationHandleType(LocationHandleType.c_Instance);
                break;
        }

        handle.setMemoRegistry(discreteMemoRegistry);

        try {
            dts = DTSDiscoverer.establishEntryPoint(handle);

        } catch (CoreException ce) {
            discreteMemoRegistry.add((IMemo) ce);

        } finally {

            if ( dts != null)
                discreteMemoRegistry.detach(cookie);

        }

        return  dts;
    }
    /**
     * Invoke a command on a domainobject
     *
     * @param dts: The active DTS
     *
     * @param workingDO: The context domain object
     *
     * @param methodName: The method name to invoke, e.g., "CreateFact"
     *
     * @param methodArgs: The args to pass to the method
     *
     * @return A domain object
     */
    protected Object invokeDO(IDTS dts,
                              IXbrlDomain workingDO,
                              String methodName,
                              Object[] methodArgs) throws CoreException {

        Object retObject = null;

        if (methodArgs == null)
            methodArgs = new Object[] {null};

        retObject = workingDO.invoke(dts, methodName, methodArgs);

        return retObject;
    }
    public IDTS loadTaxonom() throws Exception{


        String fileUri = TAXONOM;
        int fileType = -1;
        IDTS dts = null;

        try {

            CreatorXbrlUBmatrix xbrl = new CreatorXbrlUBmatrix();

            if (xbrl.getMemoList().size() > 0) {

                xbrl.displayMemos();
                return null;
            }

            System.out.println("Creating Acme Instance Document - Press any key to proceed");

            fileType = LocationHandleType.c_Taxonomy;

            // get the DTS
            xbrl.clearMemoList();
            dts = xbrl.load(fileUri, fileType);
            if (xbrl.getMemoList().size() > 0) {

                xbrl.displayMemos();
                return null;
            }


        } catch (Exception e) {

            System.out.println("Error: " + e.getMessage());
            System.out.println("Statck Trace : " + e.getStackTrace());
        }
        return  dts;
    }
    /**
     * Find the correct language to use for parser
     *
     * @param query: query
     *
     *
     * @param prefixMap: Prefix/namespaceURI pairs
     *
     * @return Compiled expression
     */
    protected IDTSQuery findPath(IDTSNode node, HashMap prefixMap, String query) {

        IDTSQuery path = null;

        ILocationHandle lh = node.getLocationHandle();
        IPrefixResolver resolver = lh.getPrefixResolver();
        String savedQuery = query;

        try {
            path = DTSPath.compile(query);

            if(path!=null)
                return path;

            else {

                updateResolver(resolver, prefixMap);
                path = new XQuery10(resolver, null, savedQuery);

                if(path!=null)
                    return path;

                else {
                    updateResolver(resolver, prefixMap);
                    path = new XPath20(resolver, null, savedQuery);
                    return path;

                }

            }

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        return null;
    }

    /**
     * Update the resolver with a new collection of prefix/namespace pairs
     *
     * @param resolver: Prefix resolver
     *
     * @param prefixMap: New prefixes to add
     */
    protected void updateResolver(IPrefixResolver resolver, HashMap prefixMap) {

        if (resolver == null && prefixMap != null)
            resolver = new ubmatrix.xbrl.common.xml.xPath.xerces.src.XercesPrefixResolverImpl();
        else if (prefixMap == null && resolver == null)
            return;


        if (prefixMap.size() > 0) {

            Iterator itr = ResetableIterator.getIterator(prefixMap.entrySet());
            Utility.resetIterator(itr);

            while (itr.hasNext()) {

                Map.Entry me = (Map.Entry)itr.next();
                String prefix = (String)me.getKey();
                String ns = (String)me.getValue();

                resolver.addNamespace(prefix, ns);
            }
        }
    }


    /**
     * This method writes to a new file
     *
     * @param dts: DTS to write
     *
     * @param instanceDocumentUri: URI of instance document where the contents will be written
     * @throws CoreException
     */
    public void write(IDTS dts, String instanceDocumentUri) throws CoreException {

        ILocationHandle newLH = null;
        IDTSNode dtsNode = dts.getEntryNode();

        try {
            newLH = new FileLocationHandle(instanceDocumentUri);
            dtsNode.write(newLH);
            System.out.println("Successfully created instance document at " + newLH.getPhysicalUri());
        } catch (Exception e) {

            System.out.println("%ERROR%:  Failed attempting to write\n\t" +
                    dtsNode.getLocationHandle().getPhysicalUri() + "\n\t\tto\n\t" +
                    newLH.getPhysicalUri());

            System.out.println(e.getMessage());
            System.out.println(e.getStackTrace());
        }
    }
    public Object getInstance() throws Exception {
        try{

            HashMap prefixMap = new HashMap();

            // These namespace mappings are required for the XPath expressions to compile
            prefixMap.put("xbrli", "http://www.xbrl.org/2003/instance");
           // prefixMap.put("xs", "http://www.w3.org/2001/XMLSchema");
//            prefixMap.put("xsi", SchemaConstant.xsi);
//            for (XbrlNameSpace ns:XbrlNameSpace.values()){
//                prefixMap.put(ns.getNameSpace(), ns.getUrl());
//            }

            IDTS taxonom = loadTaxonom();
            for(Object o: taxonom.find("/'*'").toArray()){ String aa = o.toString();

                if (aa.contains("pur_cb")){
                    System.out.println(o.toString());}
            }

            File instanceFile = File.createTempFile("npf", ".xbrl");

            String instanceDocumentUri = instanceFile.getAbsolutePath();

            File instanceNewFile = File.createTempFile("npf_out", ".xbrl");
            String newInstanceDocumentUri = instanceNewFile.getAbsolutePath();


            IDTSNode entryNode =  taxonom.getEntryNode();
            //http://xbrl.org/2006/xbrldi http://www.xbrl.org/2006/xbrldi-2006.xsd
            IXbrlDomain taxonomyDO1 = (IXbrlDomain)taxonom.findSingle("/'http://www.cbr.ru/xbrl/2017-01-01/ifrs-ru/EP/EP_PURCB'");
            //IXbrlDomain taxonomyDO2 = (IXbrlDomain)taxonom.findSingle("/'&"+ CbrNameSpace.cbr_coa.getUrl()+ "#'");
            invokeDO(taxonom, taxonomyDO1, "CreateInstance", new Object[]{instanceDocumentUri});
            clearMemoList();
            IDTS dts = load(instanceDocumentUri, LocationHandleType.c_Instance);

            entryNode = dts.getEntryNode();
            //entryNode.lock(dts);

            IDTSQuery query = findPath(entryNode, prefixMap, "/xbrli:xbrl");
            IXbrlDomain instanceDO = (IXbrlDomain)dts.findSingle(query);

// ****************************CREATING namespaces*****************************************
            for (XbrlNameSpace xbrl:XbrlNameSpace.values()){
                invokeDO(dts, instanceDO, "AddNamespaceDeclaration",
                        new Object[]{xbrl.getUrl(),xbrl.getNameSpace()});
            }
            for (IfrsNameSpace ifrs:IfrsNameSpace.values()){
                invokeDO(dts, instanceDO, "AddNamespaceDeclaration",
                        new Object[]{ifrs.getUrl(),ifrs.getNameSpace()});
            }
            for (CbrNameSpace xbrl:CbrNameSpace.values()){
                invokeDO(dts, instanceDO, "AddNamespaceDeclaration",
                        new Object[]{xbrl.getUrl(),xbrl.getNameSpace()});
            }





            entryNode.unlock(dts);

            write(dts, instanceDocumentUri);

        } catch (Exception e) {

            System.out.println("Error: " + e.getMessage());
            System.out.println("Statck Trace : " + e.getStackTrace());
        }

        return null;
    }


    @Override
    public void onStart(Object type, long start, long stop, boolean cancelAllowed, String message) {

    }

    @Override
    public boolean onProgress(Object type, long rate, Object[] parameters) throws FormatterException {
        return false;
    }

    @Override
    public void onStop(Object type, String message) throws FormatterException {

    }

    @Override
    public void cancel() {

    }

    @Override
    public void pause(boolean flag) {

    }
}
